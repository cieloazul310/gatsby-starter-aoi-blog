{"version":3,"sources":["webpack:///./src/components/Jumbotron.tsx","webpack:///../gatsby-theme-aoi/src/layouts/JumbotronLayout/index.tsx","webpack:///./src/utils/useAllPosts.tsx","webpack:///./src/components/ArchiveList.tsx","webpack:///./src/pages/archive.tsx"],"names":["useStyles","makeStyles","theme","createStyles","jumbotronBg","bgImg","height","backgroundImage","undefined","backgroundColor","palette","type","secondary","light","background","paper","backgroundPosition","backgroundSize","filter","transform","jumbotronText","color","position","display","flexDirection","justifyContent","zIndex","padding","spacing","breakpoints","down","jumbotronTitle","fontWeight","Jumbotron","title","header","subtitle","image","classes","overflow","className","variant","JumbotronLayout","jumbotron","disableGutters","children","maxWidth","props","disablePaddingTop","py","useAllPosts","data","useStaticQuery","React","allMdx","edges","ArchiveList","posts","current","subheader","button","inset","allMonths","reduce","accum","node","frontmatter","year","month","map","d","key","indexOf","totalCount","post","length","List","ListSubheader","item","ListItemLink","to","primaryText","secondaryText","selected","ArchivePage"],"mappings":"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","file":"component---src-pages-archive-tsx-3203b42811a90875b1a2.js","sourcesContent":["import * as React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles<Theme, { bgImg?: string }>((theme: Theme) =>\n  createStyles({\n    jumbotronBg: ({ bgImg }) => ({\n      height: '100%',\n      backgroundImage: bgImg ? `url(${bgImg})` : undefined,\n      backgroundColor: bgImg ? undefined : theme.palette.type !== 'dark' ? theme.palette.secondary.light : theme.palette.background.paper,\n      backgroundPosition: 'center',\n      backgroundSize: 'cover',\n      filter: bgImg ? 'blur(6px) brightness(0.9)' : undefined,\n      transform: bgImg ? 'scale(1.1)' : undefined,\n    }),\n    jumbotronText: {\n      height: 280,\n      color: 'white',\n      position: 'absolute',\n      transform: 'translate(0, -100%)',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      zIndex: 2,\n      padding: theme.spacing(2, 4),\n      [theme.breakpoints.down('sm')]: {\n        padding: theme.spacing(2),\n      },\n    },\n    jumbotronTitle: {\n      fontWeight: 'bold',\n    },\n  })\n);\n\ninterface Props {\n  title: string | JSX.Element | JSX.Element[] | (string | JSX.Element | JSX.Element[])[];\n  header?: string | JSX.Element | JSX.Element[] | (string | JSX.Element | JSX.Element[])[];\n  subtitle?: string | JSX.Element | JSX.Element[] | (string | JSX.Element | JSX.Element[])[];\n  image?: string;\n}\n\nfunction Jumbotron({ title, header, subtitle, image }: Props) {\n  const classes = useStyles({ bgImg: image ?? undefined });\n\n  return (\n    <Box height={280} overflow=\"hidden\">\n      <Box className={classes.jumbotronBg} />\n      <Box className={classes.jumbotronText}>\n        {header ? <Typography variant=\"subtitle2\">{header}</Typography> : null}\n        <Typography variant=\"h2\" className={classes.jumbotronTitle}>\n          {title}\n        </Typography>\n        {subtitle ? <Typography variant=\"subtitle1\">{subtitle}</Typography> : null}\n      </Box>\n    </Box>\n  );\n}\n\nexport default Jumbotron;\n","import * as React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Layout, { LayoutProps } from '../../layout';\n\ntype Props = {\n  jumbotron: JSX.Element | JSX.Element[];\n} & LayoutProps;\n\nexport default function JumbotronLayout({ jumbotron, disableGutters, children, maxWidth = false, ...props }: Props) {\n  return (\n    <Layout maxWidth={false} disableGutters disablePaddingTop {...props}>\n      {jumbotron}\n      <Container maxWidth={maxWidth} disableGutters={disableGutters}>\n        <Box py={4}>{children}</Box>\n      </Container>\n    </Layout>\n  );\n}\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllPostsQuery } from '../../graphql-types';\n\nfunction useAllPosts() {\n  const data = useStaticQuery<AllPostsQuery>(graphql`\n    query AllPosts {\n      allMdx(sort: { fields: frontmatter___date, order: DESC }, filter: { fileAbsolutePath: { regex: \"/content/blog/\" } }) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            id\n            frontmatter {\n              title\n              date(formatString: \"YYYY-MM-DD\")\n              year: date(formatString: \"YYYY\")\n              month: date(formatString: \"MM\")\n              categories\n              author {\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => data.allMdx.edges, [data]);\n}\n\nexport default useAllPosts;\n\ntype Month = {\n  year: string;\n  month: string;\n  key: string;\n  totalCount: number;\n};\n\nexport function useAllMonths(): Month[] {\n  const posts = useAllPosts();\n  return React.useMemo(() => {\n    return posts.reduce<Month[]>((accum, { node }) => {\n      const { year, month } = node.frontmatter;\n      const index = accum.map((d) => d.key).indexOf(`${year}/${month}`);\n      if (index < 0) {\n        return [\n          ...accum,\n          {\n            year,\n            month,\n            key: `${year}/${month}`,\n            totalCount: posts.filter((post) => post.node.frontmatter?.year === year && post.node.frontmatter?.month === month).length,\n          },\n        ];\n      } else {\n        return accum;\n      }\n    }, []);\n  }, [posts]);\n}\n","import * as React from 'react';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ListItemLink from 'gatsby-theme-aoi/src/components/ListItemLink';\nimport { useAllMonths } from '../utils/useAllPosts';\n\ninterface Props {\n  current?: string;\n  button?: boolean;\n  inset?: boolean;\n  subheader?: boolean;\n}\n\nfunction ArchiveList({ current, subheader = false, button = false, inset = false }: Props) {\n  const allMonths = useAllMonths();\n\n  return (\n    <List subheader={subheader ? <ListSubheader>Archive</ListSubheader> : null}>\n      {allMonths.map((item) => (\n        <ListItemLink\n          key={item.key}\n          to={`/blog/${item.year}/${item.month}`}\n          primaryText={item.key}\n          secondaryText={`${item.totalCount} posts`}\n          button={button}\n          inset={inset}\n          selected={item.key === current}\n        />\n      ))}\n    </List>\n  );\n}\n\nexport default ArchiveList;\n","import * as React from 'react';\nimport Layout from 'gatsby-theme-aoi/src/layouts/JumbotronLayout';\nimport Jumbotron from '../components/Jumbotron';\nimport ArchiveList from '../components/ArchiveList';\n\nfunction ArchivePage() {\n  return (\n    <Layout title=\"Archive\" maxWidth=\"md\" jumbotron={<Jumbotron title=\"Archive\" />}>\n      <ArchiveList />\n    </Layout>\n  );\n}\n\nexport default ArchivePage;\n"],"sourceRoot":""}