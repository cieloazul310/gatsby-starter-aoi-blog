{"version":3,"sources":["webpack:///./src/components/InlineAuthor.tsx","webpack:///./src/components/Jumbotron.tsx","webpack:///../node_modules/@material-ui/icons/Public.js","webpack:///../gatsby-theme-aoi/src/layouts/JumbotronLayout/index.tsx","webpack:///./src/utils/useAllPosts.tsx","webpack:///./src/pages/blog/index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","title","marginLeft","spacing","marginRight","item","verticalAlign","InlineAuthor","author","classes","name","twitter","github","url","className","href","color","jumbotronBg","bgImg","height","backgroundImage","backgroundColor","palette","type","secondary","light","background","paper","backgroundPosition","backgroundSize","filter","transform","jumbotronText","position","display","flexDirection","justifyContent","zIndex","padding","jumbotronTitle","fontWeight","Jumbotron","frontmatter","date","subtitle","featuredImage","childImageSharp","fluid","src","Box","overflow","Typography","variant","_interopRequireDefault","Object","defineProperty","exports","value","_react","_default","createElement","d","JumbotronLayout","jumbotron","children","maxWidth","props","disableGutters","disablePaddingTop","py","useAllPosts","data","React","allMdx","edges","BlogIndexPage","allPosts","map","node","key","id","component","AppLink","to","fields","slug"],"mappings":"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","file":"component---src-pages-blog-index-tsx-122fd4cffdce92a0a486.js","sourcesContent":["import * as React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport MuiLink from '@material-ui/core/Link';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport GithubIcon from '@material-ui/icons/Github';\nimport PublicIcon from '@material-ui/icons/Public';\n\nimport { AuthorsJson } from '../../graphql-types';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  title: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1)\n  },\n  item: {\n    marginRight: theme.spacing(.5),\n    verticalAlign: 'sub'\n  }\n}));\n\ninterface Props {\n  author: AuthorsJson;\n}\n\nfunction InlineAuthor({ author }: Props) {\n  const classes = useStyles();\n  const { name, twitter, github, url } = author;\n  return (\n    <span>\n      <span className={classes.title}>\n        posted by <strong>{name}</strong>\n      </span>\n      {twitter ? (\n        <MuiLink className={classes.item} href={`https://twitter.com/${twitter}`} color=\"inherit\">\n          <TwitterIcon />\n        </MuiLink>\n      ) : null}\n      {url ? (\n        <MuiLink className={classes.item} href={url} color=\"inherit\">\n          <PublicIcon />\n        </MuiLink>\n      ) : null}\n      {github ? (\n        <MuiLink className={classes.item} href={`https://github.com/${github}`} color=\"inherit\">\n          <GithubIcon />\n        </MuiLink>\n      ) : null}\n    </span>\n  );\n}\n\nexport default InlineAuthor;\n","import * as React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport InlineAuthor from './InlineAuthor';\nimport { Frontmatter } from '../../graphql-types';\n\nconst useStyles = makeStyles<Theme, { bgImg: string }>((theme: Theme) =>\n  createStyles({\n    jumbotronBg: ({ bgImg }) => ({\n      height: '100%',\n      backgroundImage: bgImg ? `url(${bgImg})` : null,\n      backgroundColor: bgImg ? null : theme.palette.type !== 'dark' ? theme.palette.secondary.light : theme.palette.background.paper,\n      backgroundPosition: 'center',\n      backgroundSize: 'cover',\n      filter: bgImg ? 'blur(8px) brightness(0.8)' : null,\n      transform: bgImg ? 'scale(1.1)' : null,\n      //transition: theme.transitions.create(\"background\")\n    }),\n    jumbotronText: {\n      height: 280,\n      color: 'white',\n      position: 'absolute',\n      transform: 'translate(0, -100%)',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      zIndex: 2,\n      padding: theme.spacing(4)\n    },\n    jumbotronTitle: {\n      fontWeight: 'bold'\n    }\n  })\n);\n\ninterface Props {\n  frontmatter: Frontmatter;\n}\n\nfunction Jumbotron({ frontmatter: { title, date, subtitle, author, featuredImage } }: Props) {\n  const classes = useStyles({ bgImg: featuredImage ? featuredImage.childImageSharp.fluid.src : null });\n\n  return (\n    <Box height={280} overflow=\"hidden\">\n      <Box className={classes.jumbotronBg} />\n      <Box className={classes.jumbotronText}>\n        <Typography variant=\"subtitle2\">\n          <time>{date}</time>  {author ? <InlineAuthor author={author} /> : null}\n        </Typography>\n        <Typography variant=\"h2\" className={classes.jumbotronTitle}>\n          {title}\n        </Typography>\n        {subtitle ? <Typography variant=\"subtitle1\">{subtitle}</Typography> : null}\n      </Box>\n    </Box>\n  );\n}\n\nexport default Jumbotron;\n","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon[\"default\"])(_react[\"default\"].createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.95-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z\"\n}), 'Public');\n\nexports[\"default\"] = _default;","import * as React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Layout, { LayoutProps } from '../../layout';\n\ntype Props = {\n  jumbotron: JSX.Element | JSX.Element[];\n} & LayoutProps;\n\nexport default function JumbotronLayout({ jumbotron, children, maxWidth = false, ...props }: Props) {\n  return (\n    <Layout maxWidth={false} disableGutters disablePaddingTop {...props}>\n      {jumbotron}\n      <Container maxWidth={maxWidth}>\n        <Box py={4}>{children}</Box>\n      </Container>\n    </Layout>\n  );\n}\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllPostsQuery } from '../../graphql-types';\n\nfunction useAllPosts() {\n  const data = useStaticQuery<AllPostsQuery>(graphql`\n    query AllPosts {\n      allMdx(sort: { fields: frontmatter___date, order: DESC }, filter: { fileAbsolutePath: { regex: \"/content/blog/\" } }) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            id\n            frontmatter {\n              title\n              date(formatString: \"YYYY-MM-DD\")\n              categories\n              author {\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => data.allMdx.edges, []);\n}\n\nexport default useAllPosts;\n","import * as React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Layout from 'gatsby-theme-aoi/src/layouts/JumbotronLayout';\nimport AppLink from 'gatsby-theme-aoi/src/components/AppLink';\nimport Jumbotron from '../../components/Jumbotron';\n\nimport useAllPosts from '../../utils/useAllPosts';\n\nfunction BlogIndexPage() {\n  const allPosts = useAllPosts();\n  return (\n    <Layout title=\"Blog\" jumbotron={<Jumbotron frontmatter={{ title: 'All Posts', featuredImage: null }} />}>\n      {allPosts.map(({ node }) => (\n        <Box py={3} key={node.id}>\n          <Typography variant=\"subtitle1\">\n            {node.frontmatter.date}  post by <strong>{node.frontmatter.author.name}</strong>\n          </Typography>\n          <Typography variant=\"h4\" component=\"h3\">\n            <AppLink color=\"textPrimary\" to={node.fields.slug}>\n              {node.frontmatter.title}\n            </AppLink>\n          </Typography>\n        </Box>\n      ))}\n    </Layout>\n  );\n}\n\nexport default BlogIndexPage;\n"],"sourceRoot":""}