{"version":3,"sources":["webpack:///../gatsby-theme-aoi/src/components/ListItemLink.tsx","webpack:///./src/pages/category.tsx"],"names":["ListItemLink","color","to","primaryText","secondaryText","props","useMediaQuery","theme","breakpoints","down","component","GatsbyLink","button","primary","secondary","useStyles","makeStyles","createStyles","nested","paddingLeft","spacing","footer","textAlign","CategoriesPage","group","allMdx","classes","title","jumbotron","sort","a","b","totalCount","map","category","i","key","fieldValue","edges","index","node","className","dense","frontmatter","date","author","name","fields","slug","divider"],"mappings":"ilFAoCeA,IApBf,YAA0G,QAAlFC,aAAkF,MAA1E,UAA0E,EAA/DC,EAA+D,EAA/DA,GAAIC,EAA2D,EAA3DA,YAAaC,EAA8C,EAA9CA,cAAkBC,E,oIAA4B,iDAGxG,OAFiBC,aAAc,SAACC,GAAD,OAAkBA,EAAMC,YAAYC,KAAK,SAGtE,gBAAC,IAAD,eAAUC,UAAWC,OAAYT,GAAIA,EAAIU,QAAM,GAAKP,GAClD,gBAAC,IAAD,CAAcQ,QAASV,EAAaW,UAAWV,KAGjD,gBAAC,IAAaC,EACZ,gBAAC,IAAD,CACEQ,QACE,gBAAC,IAAD,CAASX,GAAIA,EAAID,MAAOA,GACrBE,GAGLW,UAAWV,GAAiB,U,qMCnB9BW,EAAYC,aAAW,SAACT,GAAD,OAC3BU,YAAa,CACXC,OAAQ,CACNC,YAAaZ,EAAMa,QAAQ,IAE7BC,OAAQ,CACNC,UAAW,cAsEFC,UAjEf,WACE,IAwBQC,EAxBK,OAwBUC,OAAfD,MACFE,EAAUX,IAChB,OACE,gBAAC,IAAD,CAAQY,MAAM,WAAWC,UAAW,gBAAC,IAAD,CAAWD,MAAM,cACnD,gBAAC,IAAD,KACGH,EACEK,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,WAAaF,EAAEE,cAChCC,KAAI,SAACC,EAAUC,GAAX,OACH,gBAAC,WAAD,CAAgBC,IAAKD,GACnB,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEtB,QACE,gBAAC,IAAD,CAASX,GAAE,aAAegC,EAASG,WAAcpC,MAAM,WACpDiC,EAASG,YAGdvB,UAAcoB,EAASF,WAAd,WAGb,gBAAC,IAAD,KACGE,EAASI,MAAML,KAAI,WAAWM,GAAX,IAAGC,EAAH,EAAGA,KAAH,OAClB,gBAAC,IAAD,CACEC,UAAWf,EAAQR,OACnBwB,OAAK,EACLN,IAAKG,EACLpC,YAAaqC,EAAKG,YAAYhB,MAC9BvB,cAAkBoC,EAAKG,YAAYC,KAAtB,YAAsCJ,EAAKG,YAAYE,OAAOC,KAC3E5C,GAAIsC,EAAKO,OAAOC,KAChBC,SAAO,OAGX,gBAAC,IAAD,CAAcR,UAAWf,EAAQL,OAAQlB,YAAY,OAAOD,GAAE,aAAegC,EAASG,WAAcpC,MAAM","file":"component---src-pages-category-tsx-6986771e392424500785.js","sourcesContent":["import * as React from 'react';\nimport { Link as GatsbyLink, GatsbyLinkProps } from 'gatsby';\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { LinkProps as MuiLinkProps } from '@material-ui/core/Link';\nimport { Theme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport AppLink from './AppLink';\n\ntype ListItemLinkProps<T = {}> = Omit<ListItemProps, 'button' | 'ref'> &\n  Partial<Pick<MuiLinkProps, 'color'>> & {\n    to: string;\n    primaryText: string;\n    secondaryText?: string;\n  } & Omit<GatsbyLinkProps<T>, 'ref'>;\n\nfunction ListItemLink({ color = 'inherit', to, primaryText, secondaryText, ...props }: ListItemLinkProps) {\n  const isMobile = useMediaQuery((theme: Theme) => theme.breakpoints.down('xs'));\n  \n  return isMobile ? (\n    <ListItem component={GatsbyLink} to={to} button {...props}>\n      <ListItemText primary={primaryText} secondary={secondaryText} />\n    </ListItem>\n  ) : (\n    <ListItem {...props}>\n      <ListItemText\n        primary={\n          <AppLink to={to} color={color}>\n            {primaryText}\n          </AppLink>\n        }\n        secondary={secondaryText || null}\n      />\n    </ListItem>\n  );\n}\nexport default ListItemLink;\n","import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Layout from 'gatsby-theme-aoi/src/layouts/JumbotronLayout';\nimport AppLink from 'gatsby-theme-aoi/src/components/AppLink';\nimport ListItemLink from 'gatsby-theme-aoi/src/components/ListItemLink';\nimport Jumbotron from '../components/Jumbotron';\nimport { CategoriesQuery } from '../../graphql-types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4)\n    },\n    footer: {\n      textAlign: 'right'\n    }\n  })\n);\n\nfunction CategoriesPage() {\n  const data = useStaticQuery<CategoriesQuery>(graphql`\n    query Categories {\n      allMdx(filter: { fileAbsolutePath: { regex: \"/content/blog/\" } }, sort: { fields: [frontmatter___date], order: DESC }) {\n        group(field: frontmatter___categories, limit: 5) {\n          fieldValue\n          totalCount\n          edges {\n            node {\n              frontmatter {\n                title\n                date(formatString: \"YYYY-MM-DD\")\n                author {\n                  name\n                }\n              }\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  const { group } = data.allMdx;\n  const classes = useStyles();\n  return (\n    <Layout title=\"Category\" jumbotron={<Jumbotron title=\"Category\" />}>\n      <List>\n        {group\n          .sort((a, b) => b.totalCount - a.totalCount)\n          .map((category, i) => (\n            <React.Fragment key={i}>\n              <ListItem>\n                <ListItemText\n                  primary={\n                    <AppLink to={`/category/${category.fieldValue}`} color=\"inherit\">\n                      {category.fieldValue}\n                    </AppLink>\n                  }\n                  secondary={`${category.totalCount}posts`}\n                />\n              </ListItem>\n              <List>\n                {category.edges.map(({ node }, index) => (\n                  <ListItemLink\n                    className={classes.nested}\n                    dense\n                    key={index}\n                    primaryText={node.frontmatter.title}\n                    secondaryText={`${node.frontmatter.date} post by ${node.frontmatter.author.name}`}\n                    to={node.fields.slug}\n                    divider\n                  />\n                ))}\n                <ListItemLink className={classes.footer} primaryText=\"More\" to={`/category/${category.fieldValue}`} color=\"secondary\" />\n              </List>\n            </React.Fragment>\n          ))}\n      </List>\n    </Layout>\n  );\n}\n\nexport default CategoriesPage;\n"],"sourceRoot":""}