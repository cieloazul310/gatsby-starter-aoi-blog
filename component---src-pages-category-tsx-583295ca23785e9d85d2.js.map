{"version":3,"sources":["webpack:///./src/components/Jumbotron.tsx","webpack:///../gatsby-theme-aoi/src/layouts/JumbotronLayout/index.tsx","webpack:///./src/pages/category.tsx"],"names":["useStyles","makeStyles","theme","createStyles","jumbotronBg","bgImg","height","backgroundImage","backgroundColor","palette","type","secondary","light","background","paper","backgroundPosition","backgroundSize","filter","transform","jumbotronText","color","position","display","flexDirection","justifyContent","zIndex","padding","spacing","breakpoints","down","jumbotronTitle","fontWeight","Jumbotron","title","header","subtitle","image","classes","overflow","className","variant","JumbotronLayout","jumbotron","disableGutters","children","maxWidth","props","disablePaddingTop","py","nested","paddingLeft","footer","textAlign","CategoriesPage","group","allMdx","sort","a","b","totalCount","map","category","i","key","primary","to","fieldValue","edges","index","node","dense","primaryText","frontmatter","secondaryText","date","author","name","fields","slug","divider"],"mappings":"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","file":"component---src-pages-category-tsx-583295ca23785e9d85d2.js","sourcesContent":["import * as React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles<Theme, { bgImg: string }>((theme: Theme) =>\n  createStyles({\n    jumbotronBg: ({ bgImg }) => ({\n      height: '100%',\n      backgroundImage: bgImg ? `url(${bgImg})` : null,\n      backgroundColor: bgImg ? null : theme.palette.type !== 'dark' ? theme.palette.secondary.light : theme.palette.background.paper,\n      backgroundPosition: 'center',\n      backgroundSize: 'cover',\n      filter: bgImg ? 'blur(6px) brightness(0.9)' : null,\n      transform: bgImg ? 'scale(1.1)' : null,\n    }),\n    jumbotronText: {\n      height: 280,\n      color: 'white',\n      position: 'absolute',\n      transform: 'translate(0, -100%)',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      zIndex: 2,\n      padding: theme.spacing(2, 4),\n      [theme.breakpoints.down('sm')]: {\n        padding: theme.spacing(2),\n      },\n    },\n    jumbotronTitle: {\n      fontWeight: 'bold',\n    },\n  })\n);\n\ninterface Props {\n  title: string | JSX.Element | JSX.Element[] | (string | JSX.Element | JSX.Element[])[];\n  header?: string | JSX.Element | JSX.Element[] | (string | JSX.Element | JSX.Element[])[];\n  subtitle?: string | JSX.Element | JSX.Element[] | (string | JSX.Element | JSX.Element[])[];\n  image?: string;\n}\n\nfunction Jumbotron({ title, header, subtitle, image }: Props) {\n  const classes = useStyles({ bgImg: image || null });\n\n  return (\n    <Box height={280} overflow=\"hidden\">\n      <Box className={classes.jumbotronBg} />\n      <Box className={classes.jumbotronText}>\n        {header ? <Typography variant=\"subtitle2\">{header}</Typography> : null}\n        <Typography variant=\"h2\" className={classes.jumbotronTitle}>\n          {title}\n        </Typography>\n        {subtitle ? <Typography variant=\"subtitle1\">{subtitle}</Typography> : null}\n      </Box>\n    </Box>\n  );\n}\n\nexport default Jumbotron;\n","import * as React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Layout, { LayoutProps } from '../../layout';\n\ntype Props = {\n  jumbotron: JSX.Element | JSX.Element[];\n} & LayoutProps;\n\nexport default function JumbotronLayout({ jumbotron, disableGutters, children, maxWidth = false, ...props }: Props) {\n  return (\n    <Layout maxWidth={false} disableGutters disablePaddingTop {...props}>\n      {jumbotron}\n      <Container maxWidth={maxWidth} disableGutters={disableGutters}>\n        <Box py={4}>{children}</Box>\n      </Container>\n    </Layout>\n  );\n}\n","import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Layout from 'gatsby-theme-aoi/src/layouts/JumbotronLayout';\nimport AppLink from 'gatsby-theme-aoi/src/components/AppLink';\nimport ListItemLink from 'gatsby-theme-aoi/src/components/ListItemLink';\nimport Jumbotron from '../components/Jumbotron';\nimport { CategoriesQuery } from '../../graphql-types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n    footer: {\n      textAlign: 'right',\n    },\n  })\n);\n\nfunction CategoriesPage() {\n  const data = useStaticQuery<CategoriesQuery>(graphql`\n    query Categories {\n      allMdx(filter: { fileAbsolutePath: { regex: \"/content/blog/\" } }, sort: { fields: [frontmatter___date], order: DESC }) {\n        group(field: frontmatter___categories, limit: 5) {\n          fieldValue\n          totalCount\n          edges {\n            node {\n              frontmatter {\n                title\n                date(formatString: \"YYYY-MM-DD\")\n                author {\n                  name\n                }\n              }\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  const { group } = data.allMdx;\n  const classes = useStyles();\n  return (\n    <Layout title=\"Category\" maxWidth=\"md\" jumbotron={<Jumbotron title=\"Category\" />}>\n      <List>\n        {group\n          .sort((a, b) => b.totalCount - a.totalCount)\n          .map((category, i) => (\n            <React.Fragment key={i}>\n              <ListItem>\n                <ListItemText\n                  primary={\n                    <AppLink to={`/category/${category.fieldValue}`} color=\"inherit\">\n                      {category.fieldValue}\n                    </AppLink>\n                  }\n                  secondary={`${category.totalCount}posts`}\n                />\n              </ListItem>\n              <List>\n                {category.edges.map(({ node }, index) => (\n                  <ListItemLink\n                    className={classes.nested}\n                    dense\n                    key={index}\n                    primaryText={node.frontmatter.title}\n                    secondaryText={`${node.frontmatter.date} post by ${node.frontmatter.author.name}`}\n                    to={node.fields.slug}\n                    divider\n                  />\n                ))}\n                <ListItemLink className={classes.footer} primaryText=\"More\" to={`/category/${category.fieldValue}`} color=\"secondary\" />\n              </List>\n            </React.Fragment>\n          ))}\n      </List>\n    </Layout>\n  );\n}\n\nexport default CategoriesPage;\n"],"sourceRoot":""}